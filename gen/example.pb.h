// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: example.proto
// Protobuf C++ Version: 5.29.3

#ifndef example_2eproto_2epb_2eh
#define example_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_example_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_example_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_example_2eproto;
namespace example {
class Person;
struct PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
class Person_Report;
struct Person_ReportDefaultTypeInternal;
extern Person_ReportDefaultTypeInternal _Person_Report_default_instance_;
}  // namespace example
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace example {
enum Person_Gender : int {
  Person_Gender_Male = 0,
  Person_Gender_Female = 1,
  Person_Gender_Person_Gender_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Person_Gender_Person_Gender_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Person_Gender_IsValid(int value);
extern const uint32_t Person_Gender_internal_data_[];
constexpr Person_Gender Person_Gender_Gender_MIN = static_cast<Person_Gender>(0);
constexpr Person_Gender Person_Gender_Gender_MAX = static_cast<Person_Gender>(1);
constexpr int Person_Gender_Gender_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Person_Gender_descriptor();
template <typename T>
const std::string& Person_Gender_Name(T value) {
  static_assert(std::is_same<T, Person_Gender>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Gender_Name().");
  return Person_Gender_Name(static_cast<Person_Gender>(value));
}
template <>
inline const std::string& Person_Gender_Name(Person_Gender value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Person_Gender_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Person_Gender_Parse(absl::string_view name, Person_Gender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Person_Gender>(
      Person_Gender_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Person_Report final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:example.Person.Report) */ {
 public:
  inline Person_Report() : Person_Report(nullptr) {}
  ~Person_Report() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Person_Report* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Person_Report));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Person_Report(
      ::google::protobuf::internal::ConstantInitialized);

  inline Person_Report(const Person_Report& from) : Person_Report(nullptr, from) {}
  inline Person_Report(Person_Report&& from) noexcept
      : Person_Report(nullptr, std::move(from)) {}
  inline Person_Report& operator=(const Person_Report& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person_Report& operator=(Person_Report&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Person_Report& default_instance() {
    return *internal_default_instance();
  }
  static inline const Person_Report* internal_default_instance() {
    return reinterpret_cast<const Person_Report*>(
        &_Person_Report_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Person_Report& a, Person_Report& b) { a.Swap(&b); }
  inline void Swap(Person_Report* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person_Report* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Person_Report* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Person_Report>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Person_Report& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Person_Report& from) { Person_Report::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Person_Report* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "example.Person.Report"; }

 protected:
  explicit Person_Report(::google::protobuf::Arena* arena);
  Person_Report(::google::protobuf::Arena* arena, const Person_Report& from);
  Person_Report(::google::protobuf::Arena* arena, Person_Report&& from) noexcept
      : Person_Report(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuggestionFieldNumber = 1,
    kGenderFieldNumber = 2,
  };
  // string suggestion = 1;
  void clear_suggestion() ;
  const std::string& suggestion() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_suggestion(Arg_&& arg, Args_... args);
  std::string* mutable_suggestion();
  PROTOBUF_NODISCARD std::string* release_suggestion();
  void set_allocated_suggestion(std::string* value);

  private:
  const std::string& _internal_suggestion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_suggestion(
      const std::string& value);
  std::string* _internal_mutable_suggestion();

  public:
  // optional .example.Person.Gender gender = 2;
  bool has_gender() const;
  void clear_gender() ;
  ::example::Person_Gender gender() const;
  void set_gender(::example::Person_Gender value);

  private:
  ::example::Person_Gender _internal_gender() const;
  void _internal_set_gender(::example::Person_Gender value);

  public:
  // @@protoc_insertion_point(class_scope:example.Person.Report)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Person_Report& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr suggestion_;
    int gender_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_example_2eproto;
};
// -------------------------------------------------------------------

class Person final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:example.Person) */ {
 public:
  inline Person() : Person(nullptr) {}
  ~Person() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Person* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Person));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Person(
      ::google::protobuf::internal::ConstantInitialized);

  inline Person(const Person& from) : Person(nullptr, from) {}
  inline Person(Person&& from) noexcept
      : Person(nullptr, std::move(from)) {}
  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Person& default_instance() {
    return *internal_default_instance();
  }
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
        &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Person& a, Person& b) { a.Swap(&b); }
  inline void Swap(Person* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Person* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Person>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Person& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Person& from) { Person::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Person* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "example.Person"; }

 protected:
  explicit Person(::google::protobuf::Arena* arena);
  Person(::google::protobuf::Arena* arena, const Person& from);
  Person(::google::protobuf::Arena* arena, Person&& from) noexcept
      : Person(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Report = Person_Report;
  using Gender = Person_Gender;
  static constexpr Gender Male = Person_Gender_Male;
  static constexpr Gender Female = Person_Gender_Female;
  static inline bool Gender_IsValid(int value) {
    return Person_Gender_IsValid(value);
  }
  static constexpr Gender Gender_MIN = Person_Gender_Gender_MIN;
  static constexpr Gender Gender_MAX = Person_Gender_Gender_MAX;
  static constexpr int Gender_ARRAYSIZE = Person_Gender_Gender_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Gender_descriptor() {
    return Person_Gender_descriptor();
  }
  template <typename T>
  static inline const std::string& Gender_Name(T value) {
    return Person_Gender_Name(value);
  }
  static inline bool Gender_Parse(absl::string_view name, Gender* value) {
    return Person_Gender_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kReportsFieldNumber = 3,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .example.Person.Report reports = 3;
  int reports_size() const;
  private:
  int _internal_reports_size() const;

  public:
  void clear_reports() ;
  ::example::Person_Report* mutable_reports(int index);
  ::google::protobuf::RepeatedPtrField<::example::Person_Report>* mutable_reports();

  private:
  const ::google::protobuf::RepeatedPtrField<::example::Person_Report>& _internal_reports() const;
  ::google::protobuf::RepeatedPtrField<::example::Person_Report>* _internal_mutable_reports();
  public:
  const ::example::Person_Report& reports(int index) const;
  ::example::Person_Report* add_reports();
  const ::google::protobuf::RepeatedPtrField<::example::Person_Report>& reports() const;
  // optional string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional int32 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:example.Person)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      27, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Person& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::example::Person_Report > reports_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_example_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Person_Report

// string suggestion = 1;
inline void Person_Report::clear_suggestion() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.suggestion_.ClearToEmpty();
}
inline const std::string& Person_Report::suggestion() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:example.Person.Report.suggestion)
  return _internal_suggestion();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Person_Report::set_suggestion(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.suggestion_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:example.Person.Report.suggestion)
}
inline std::string* Person_Report::mutable_suggestion() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_suggestion();
  // @@protoc_insertion_point(field_mutable:example.Person.Report.suggestion)
  return _s;
}
inline const std::string& Person_Report::_internal_suggestion() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.suggestion_.Get();
}
inline void Person_Report::_internal_set_suggestion(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.suggestion_.Set(value, GetArena());
}
inline std::string* Person_Report::_internal_mutable_suggestion() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.suggestion_.Mutable( GetArena());
}
inline std::string* Person_Report::release_suggestion() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:example.Person.Report.suggestion)
  return _impl_.suggestion_.Release();
}
inline void Person_Report::set_allocated_suggestion(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.suggestion_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.suggestion_.IsDefault()) {
    _impl_.suggestion_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:example.Person.Report.suggestion)
}

// optional .example.Person.Gender gender = 2;
inline bool Person_Report::has_gender() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Person_Report::clear_gender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gender_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::example::Person_Gender Person_Report::gender() const {
  // @@protoc_insertion_point(field_get:example.Person.Report.gender)
  return _internal_gender();
}
inline void Person_Report::set_gender(::example::Person_Gender value) {
  _internal_set_gender(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:example.Person.Report.gender)
}
inline ::example::Person_Gender Person_Report::_internal_gender() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::example::Person_Gender>(_impl_.gender_);
}
inline void Person_Report::_internal_set_gender(::example::Person_Gender value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gender_ = value;
}

// -------------------------------------------------------------------

// Person

// optional int32 id = 1;
inline bool Person::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Person::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Person::id() const {
  // @@protoc_insertion_point(field_get:example.Person.id)
  return _internal_id();
}
inline void Person::set_id(::int32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:example.Person.id)
}
inline ::int32_t Person::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void Person::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// optional string name = 2;
inline bool Person::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Person::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Person::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:example.Person.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Person::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:example.Person.name)
}
inline std::string* Person::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:example.Person.name)
  return _s;
}
inline const std::string& Person::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Person::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Person::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Person::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:example.Person.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void Person::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:example.Person.name)
}

// repeated .example.Person.Report reports = 3;
inline int Person::_internal_reports_size() const {
  return _internal_reports().size();
}
inline int Person::reports_size() const {
  return _internal_reports_size();
}
inline void Person::clear_reports() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reports_.Clear();
}
inline ::example::Person_Report* Person::mutable_reports(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:example.Person.reports)
  return _internal_mutable_reports()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::example::Person_Report>* Person::mutable_reports()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:example.Person.reports)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_reports();
}
inline const ::example::Person_Report& Person::reports(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:example.Person.reports)
  return _internal_reports().Get(index);
}
inline ::example::Person_Report* Person::add_reports() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::example::Person_Report* _add = _internal_mutable_reports()->Add();
  // @@protoc_insertion_point(field_add:example.Person.reports)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::example::Person_Report>& Person::reports() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:example.Person.reports)
  return _internal_reports();
}
inline const ::google::protobuf::RepeatedPtrField<::example::Person_Report>&
Person::_internal_reports() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reports_;
}
inline ::google::protobuf::RepeatedPtrField<::example::Person_Report>*
Person::_internal_mutable_reports() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.reports_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace example


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::example::Person_Gender> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::example::Person_Gender>() {
  return ::example::Person_Gender_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // example_2eproto_2epb_2eh
